{"version":3,"file":"static/js/391.c33f492a.chunk.js","mappings":"gOA6GA,QAvGA,SAAgBA,GAAuC,IAAtC,eAACC,EAAc,kBAAEC,GAAkBF,EAClD,MAAMG,GAAWC,EAAAA,EAAAA,KAAaC,GAAYA,EAAQC,cAAcH,YACzDI,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,MACzCK,GAAcC,EAAAA,EAAAA,QAAO,MAwBrBC,EAAsBC,IACtBH,EAAYI,UAAYJ,EAAYI,QAAQC,SAASF,EAAMG,SAC7DZ,EAAc,GAChB,EAWF,OARAa,EAAAA,EAAAA,YAAU,KACRC,SAASC,iBAAiB,QAASP,GAE5B,KACLM,SAASE,oBAAoB,QAASR,EAAmB,IAE1D,KAGDS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKC,SAAA,EAClBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,UAAKE,EAAAA,EAAAA,GAAU,oBAAqB1B,MAClCyB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACJ,UAAU,OAAMC,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CACVC,aAAcH,EAAAA,EAAAA,GAAU,kBAAmB1B,GAC3C8B,aAAc1B,EACd2B,SA5CgBC,UACxB,MAAMC,EAAOC,EAAEjB,OAAOkB,MACtB9B,EAAc4B,GAEd,IACE,MAAMG,QAAiBC,EAAAA,EAAMC,IAAI,uCAADC,OAAwCN,IACxEzB,EAAW4B,EAASI,KAAKC,aAAe,GAC1C,CAAE,MAAOC,GACPC,QAAQD,MAAM,wCAAyCA,EACzD,OAsCKtC,IACCqB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAACC,IAAKlC,EAAYa,SACzBjB,EAAQuC,KAAI,CAACC,EAAQC,KACpBvB,EAAAA,EAAAA,KAACmB,EAAAA,EAAUK,KAAI,CAEbC,QAAM,EACNC,QAASA,KAAMC,OAzCLC,EAyCoBN,OAxCrCjD,EAAewD,SAASD,IAC3BtD,GAAmBwD,GAAe,IAAIA,EAAYF,MAF9BA,KAyC4B,EACtCG,MAAO,CAAEC,OAAQ,WAAYjC,SAE5BuB,GALIC,WAWfvB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,SACnB1B,EAAe4D,OAAS,IACvBpC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAKE,EAAAA,EAAAA,GAAU,sBAAuB1B,GAAU,QAChDyB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApB,SACP1B,EAAegD,KAAI,CAACO,EAAOL,KAC1B1B,EAAAA,EAAAA,MAACsB,EAAAA,EAAUK,KAAI,CAEbU,aAAcA,IAAMjD,EAAe2C,GACnCO,aAAcA,IAAMlD,EAAe,MACnC8C,MAAO,CAAEC,OAAQ,WAAYjC,SAAA,CAE5B6B,EAAO,IACP5C,IAAgB4C,IACf5B,EAAAA,EAAAA,KAAA,UACEF,UAAU,iBACViC,MAAO,CAAEK,SAAU,OACnBF,aAAcA,IAAMhB,QAAQmB,IAAI,wBAChCX,QAASA,IA9DFE,KACzBtD,GAAmBwD,GAAeA,EAAWQ,QAAQC,GAAMA,IAAMX,KAAO,EA6DvCY,CAAkBZ,GAAO7B,SACzC,QAZEwB,cAyBvB,C,kICnFA,MA2PA,EA3PqBkB,KACjB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAepE,EAAAA,EAAAA,KAAaC,GAAYA,EAAQoE,aAAaC,UAC7DvE,GAAWC,EAAAA,EAAAA,KAAaC,GAAYA,EAAQC,cAAcH,YACzDF,EAAgBC,IAAqBO,EAAAA,EAAAA,UAAS,KAE9CkE,EAASC,IAAcnE,EAAAA,EAAAA,UAAS,CACnCoE,SAAU,GACVC,aAAc,GACdC,eAAgB,GAChBC,cAAe,GACfC,gBAAiB,KAKrB,IAAIC,GAAO9E,EAAAA,EAAAA,KAAYC,GAAWA,EAAQ8E,UAAUD,OACpD,MAAME,EAAgC,IAAKZ,UACpCY,EAA8BC,iBAIrChE,EAAAA,EAAAA,YAAU,KACNiD,GAASgB,EAAAA,EAAAA,IAAU,CAAEC,OAAQ,IAAItF,MACjC6C,QAAQmB,IAAI,iBAAkBhE,EAAe,GAE9C,CAACA,IAIJ,MAAMuF,EAAoBA,CAACnD,EAAGoD,KAC1B,MAAMC,EAAcrD,EAAEjB,OAAOkB,MAC7BsC,GAAYe,IAAW,IAChBA,EACH,CAACF,GAAYC,MAEjB,MAAME,EAAavD,EAAEjB,OAAOkB,MAC5B,OAAQmD,GACJ,IAAK,cACD,MAAMI,EAAiBC,SAASF,EAAY,IACtCG,EAAqBvB,EAAawB,cAAcC,IACtDnD,QAAQmB,IAAI,qBAAsB8B,IAE7BG,MAAML,IAAmBA,GAAkBE,EAC5CzB,GAAS6B,EAAAA,EAAAA,IAAiB,CAAEH,cAAe,CAAEI,IAAKP,EAAgBI,IAAKF,MAEvEjD,QAAQD,MAAM,6BAElB,MACJ,IAAK,cACD,MAAMwD,EAAiBP,SAASF,EAAY,IACtCU,EAAqB9B,EAAawB,cAAcI,KAEjDF,MAAMG,IAAmBA,GAAkBC,EAC5ChC,GAAS6B,EAAAA,EAAAA,IAAiB,CAAEH,cAAe,CAAEI,IAAKE,EAAoBL,IAAKI,MAG3EvD,QAAQD,MAAM,6BAElB,MAEJ,IAAK,YACDyB,GAASiC,EAAAA,EAAAA,IAAiB,CAAEA,iBAAkBX,KAC9C,MACJ,IAAK,qBACD,MAAMY,EAAoBZ,GAAcV,EAAKuB,mBAC7CnC,GAASoC,EAAAA,EAAAA,IAAsB,CAAED,mBAAoB,CAACD,MACtD,MACJ,IAAK,kBACD,MAAMG,EAA0Bf,GAAcV,EAAKD,gBACnDX,GAASsC,EAAAA,EAAAA,IAAmB,CAAE3B,gBAAiB0B,KAC/C,MACJ,IAAK,gBACD,MAAME,EAAwBjB,GAAcV,EAAKF,cACjDV,GAASwC,EAAAA,EAAAA,IAAiB,CAAE9B,cAAe6B,KAC3C,MACJ,IAAK,iBACD,MAAME,EAAyBnB,GAAcV,EAAKH,eAClDT,GAAS0C,EAAAA,EAAAA,IAAkB,CAAEjC,eAAgBgC,KAC7C,MACJ,IAAK,WACD,MAAME,EAAmBrB,GAAcV,EAAKL,SAC5CP,GAAS4C,EAAAA,EAAAA,IAAY,CAAErC,SAAUoC,KACjC,MACJ,IAAK,eACD3C,GAAS6C,EAAAA,EAAAA,IAAgB,CAAErC,aAAcc,KACzC,MACJ,IAAK,aACD,MAAMwB,EAAqBxB,GAAcV,EAAKmC,WAC9C/C,GAASgD,EAAAA,EAAAA,IAAe,CAAEC,QAASH,KACnC,MACJ,IAAK,QACD9C,GAASkD,EAAAA,EAAAA,IAAe,CAAEC,YAAa7B,KAM/C,EAIE8B,GAAMC,EAAAA,EAAAA,OACLC,EAAaC,IAAkBpH,EAAAA,EAAAA,WAAS,GAwB/C,OACImB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+EAA8EC,SAAA,EACzFC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,UAAEE,EAAAA,EAAAA,GAAU,oBAAqB1B,MAE1DsB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UACxBC,EAAAA,EAAAA,KAACkG,EAAAA,QAAO,CAAC7H,eAAgBA,EAAgBC,kBAAmBA,OAEhE0B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKC,SAAA,EAChBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBF,EAAAA,EAAAA,MAAA,SAAOsG,QAAQ,cAAapG,SAAA,EAAEE,EAAAA,EAAAA,GAAU,WAAY1B,GAAU,UAElEyB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBC,EAAAA,EAAAA,KAAA,SACIoG,KAAK,SACLtG,UAAU,eACVuG,GAAG,cACH7B,IAAI,IACJH,IAAKzB,EAAawB,cAAcC,IAChChE,aAAcuC,EAAawB,cAAcI,IACzClE,SAAWG,GAAMmD,EAAkBnD,EAAG,yBAKtDT,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBF,EAAAA,EAAAA,MAAA,SAAOsG,QAAQ,cAAapG,SAAA,EAAEE,EAAAA,EAAAA,GAAU,WAAY1B,GAAU,UAElEyB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBC,EAAAA,EAAAA,KAAA,SACIoG,KAAK,SACLtG,UAAU,eACVuG,GAAG,cACH7B,IAAK5B,EAAawB,cAAcI,IAChCH,IAAI,KACJ3D,MAAOkC,EAAawB,cAAcC,IAClC/D,SAAWG,GAAMmD,EAAkBnD,EAAG,8BAQ9DZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,SAAOsG,QAAQ,YAAYrG,UAAU,uBAAsBC,SAAA,EAC1DE,EAAAA,EAAAA,GAAU,mBAAoB1B,GAAU,QAEzCyB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBC,EAAAA,EAAAA,KAAA,SACIsG,KAAK,YACLC,QAAU9F,GAAMmD,EAAkBnD,EAAG,aACrCX,UAAU,eACVsG,KAAK,iBACLC,GAAG,YACHhG,aAAcuC,EAAa4D,kBAIvC3G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,SAAOsG,QAAQ,qBAAqBrG,UAAU,uBAAsBC,SAAA,EACnEE,EAAAA,EAAAA,GAAU,gBAAiB1B,GAAU,QAEtCyB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBF,EAAAA,EAAAA,MAAA,UACIyG,KAAK,qBACLjG,aAAcuC,EAAaiC,mBAC3B/E,UAAU,eACVuG,GAAG,qBACH/F,SAAWG,GAAMmD,EAAkBnD,EAAG,sBAAsBV,SAAA,EAE5DC,EAAAA,EAAAA,KAAA,UAAQU,MAAM,GAAG+F,UAAQ,EAAA1G,UACxBE,EAAAA,EAAAA,GAAU,sBAAuB1B,KAEjCmI,EAAAA,GAAgBrF,KAAKwD,IAClB7E,EAAAA,EAAAA,KAAA,UAAiCU,MAAOmE,EAAmB9E,SACtD8E,GADQA,cAO7BhF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,SAAOsG,QAAQ,QAAQrG,UAAU,uBAAsBC,SAAA,EACtDE,EAAAA,EAAAA,GAAU,aAAc1B,GAAU,QAEnCyB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBC,EAAAA,EAAAA,KAAA,YACIsG,KAAK,QACLC,QAAU9F,GAAMmD,EAAkBnD,EAAG,SACrCX,UAAU,eACVuG,GAAG,QACHhG,aAAcuC,EAAa+D,cAKvC3G,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACIF,UAAU,mEACVsG,KAAK,SACL1E,QAjIMnB,UAC1B0F,GAAe,GAEf,IACI,MAAMW,EAAMC,EAAAA,GAAU,iBAChBC,EAAS,OAEf5F,QAAQmB,IAAI,OAAQmB,GAGA,aADDuD,EAAAA,EAAAA,IAAaH,EAAKE,EAAQtD,IACpCwD,QACLlB,EAAI,QAGZ,CAAE,MAAO7E,GACLgF,GAAe,GACf/E,QAAQmB,IAAIpB,EAAMF,KAAOE,EAAMF,KAAKA,KAAKkG,IAAM,oBACnD,GAgHmDlH,UAE9BE,EAAAA,EAAAA,GAAU,YAAa1B,cAOtC,C,wCCxQR2I,EAAe,CACnBC,G,+xFACAC,G,4mOAiBF,EAdkBnH,CAACoH,EAAKC,KACtB,MAAMC,EAAOF,EAAIG,MAAM,KACvB,IAAIC,EAAqBP,EAAaI,GAEtC,IAAK,MAAMI,KAAKH,EAAM,CACpB,IAAKE,IAAuBA,EAAmBC,GAC7C,OAAOL,EAETI,EAAqBA,EAAmBC,EAC1C,CAEA,OAAOD,CAAkB,C","sources":["components/common/sefaria.js","components/user/createRequest.js","utill/translator.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { ListGroup, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport translate from '../../utill/translator';\r\n\r\nfunction Sefaria({selectedTopics, setSelectedTopics}) {\r\n  const language = useSelector((myStore) => myStore.languageSlice.language);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [options, setOptions] = useState([]);\r\n  const [isMouseOver, setIsMouseOver] = useState(null);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const handleInputChange = async (e) => {\r\n    const term = e.target.value;\r\n    setSearchTerm(term);\r\n\r\n    try {\r\n      const response = await axios.get(`https://www.sefaria.org.il/api/name/${term}`);\r\n      setOptions(response.data.completions || []);\r\n    } catch (error) {\r\n      console.error('Error fetching data from Sefaria API:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddTopic = (topic) => {\r\n    if (!selectedTopics.includes(topic)) {\r\n      setSelectedTopics((prevTopics) => [...prevTopics, topic]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveTopic = (topic) => {\r\n    setSelectedTopics((prevTopics) => prevTopics.filter((t) => t !== topic));\r\n  };\r\n\r\n  const handleClickOutside = (event) => {\r\n    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n      setSearchTerm('');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('click', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-6 text-start'>\r\n      <h5>{translate('post.chooseTopics', language)}</h5>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder= {translate('post.typeSearch', language)}\r\n            defaultValue={searchTerm}\r\n            onChange={handleInputChange}\r\n          />\r\n        </InputGroup>\r\n        {searchTerm && (\r\n          <ListGroup ref={dropdownRef}>\r\n            {options.map((option, index) => (\r\n              <ListGroup.Item\r\n                key={index}\r\n                action\r\n                onClick={() => handleAddTopic(option)}\r\n                style={{ cursor: 'pointer' }}\r\n              >\r\n                {option}\r\n              </ListGroup.Item>\r\n            ))}\r\n          </ListGroup>\r\n        )}\r\n      </div>\r\n      <div className='col-6'>\r\n        {selectedTopics.length > 0 && (\r\n          <div>\r\n            <h5>{translate('post.selectedTopics', language)}:</h5>\r\n            <ListGroup>\r\n              {selectedTopics.map((topic, index) => (\r\n                <ListGroup.Item\r\n                  key={index}\r\n                  onMouseEnter={() => setIsMouseOver(topic)}\r\n                  onMouseLeave={() => setIsMouseOver(null)}\r\n                  style={{ cursor: 'pointer' }}\r\n                >\r\n                  {topic}{' '}\r\n                  {isMouseOver === topic && (\r\n                    <button\r\n                      className='btn btn-danger'\r\n                      style={{ fontSize: '6px' }}\r\n                      onMouseEnter={() => console.log('Mouse on remove icon')}\r\n                      onClick={() => handleRemoveTopic(topic)}\r\n                    >\r\n                      X\r\n                    </button>\r\n\r\n                  )}\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sefaria;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport  { commonLanguages } from '../../redux/featchers/requestSlice';\r\nimport { API_URL, doApiRequest } from '../../services/apiService';\r\nimport Sefaria from '../common/sefaria';\r\nimport translate from '../../utill/translator'\r\nimport {\r\n    setTopics,\r\n    setStudyDuration,\r\n    startDateAndTime,\r\n    setLevelOfStudy,\r\n    setDescription,\r\n    setAgeRange,\r\n    setEducationRange,\r\n    setLocationRange,\r\n    setFriendListRange,\r\n    setPrivacyType,\r\n    setPreferredLanguages\r\n\r\n} from '../../redux/featchers/requestSlice';\r\n\r\n\r\n\r\nconst ProfileInput = () => {\r\n    const dispatch = useDispatch();\r\n    const requestStudy = useSelector((myStore) => myStore.requestSlice.request);\r\n    const language = useSelector((myStore) => myStore.languageSlice.language);\r\n    const [selectedTopics, setSelectedTopics] = useState([]);\r\n    // const [showMoreInfo, setShowMoreInfo] = useState(false);\r\n    const [ratings, setRatings] = useState({\r\n        ageRange: '',\r\n        levelOfStufy: '',\r\n        educationRange: '',\r\n        locationRange: '',\r\n        friendListRange: ''\r\n    });\r\n\r\n    // const [validationError, setValidationError] = useState('');\r\n\r\n    let user = useSelector(myStore => myStore.userSlice.user)\r\n    const requestWithoutShowMoreOptions = { ...requestStudy };\r\n    delete requestWithoutShowMoreOptions.showMoreOptions;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setTopics({ topics: [...selectedTopics] }));\r\n        console.log(\"selectedTopics\", selectedTopics);\r\n\r\n    }, [selectedTopics])\r\n\r\n\r\n\r\n    const handleInputChange = (e, inputName) => {\r\n        const ratingValue = e.target.value;\r\n        setRatings((prevRatings) => ({\r\n            ...prevRatings,\r\n            [inputName]: ratingValue,\r\n        }));\r\n        const inputValue = e.target.value;\r\n        switch (inputName) {\r\n            case 'minDuration':\r\n                const newMinDuration = parseInt(inputValue, 10);\r\n                const currentMaxDuration = requestStudy.studyDuration.max;\r\n                console.log(\"currentMaxDuration\", currentMaxDuration);\r\n\r\n                if (!isNaN(newMinDuration) && newMinDuration <= currentMaxDuration) {\r\n                    dispatch(setStudyDuration({ studyDuration: { min: newMinDuration, max: currentMaxDuration } }));\r\n                } else {\r\n                    console.error('Invalid minDuration input');\r\n                }\r\n                break;\r\n            case 'maxDuration':\r\n                const newMaxDuration = parseInt(inputValue, 10);\r\n                const currentMinDuration = requestStudy.studyDuration.min;\r\n\r\n                if (!isNaN(newMaxDuration) && newMaxDuration >= currentMinDuration) {\r\n                    dispatch(setStudyDuration({ studyDuration: { min: currentMinDuration, max: newMaxDuration } }));\r\n\r\n                } else {\r\n                    console.error('Invalid maxDuration input');\r\n                }\r\n                break;\r\n\r\n            case 'startDate':\r\n                dispatch(startDateAndTime({ startDateAndTime: inputValue }));\r\n                break;\r\n            case 'preferredLanguages':\r\n                const selectedLanguages = inputValue || user.preferredLanguages;\r\n                dispatch(setPreferredLanguages({ preferredLanguages: [selectedLanguages] }));\r\n                break;\r\n            case 'friendListRange':\r\n                const selectedFriendListRange = inputValue || user.friendListRange;\r\n                dispatch(setFriendListRange({ friendListRange: selectedFriendListRange }));\r\n                break;\r\n            case 'locationRange':\r\n                const selectedLocationRange = inputValue || user.locationRange;\r\n                dispatch(setLocationRange({ locationRange: selectedLocationRange }));\r\n                break;\r\n            case 'educationRange':\r\n                const selectedEducationRange = inputValue || user.educationRange;\r\n                dispatch(setEducationRange({ educationRange: selectedEducationRange }));\r\n                break;\r\n            case 'ageRange':\r\n                const selectedAgeRange = inputValue || user.ageRange;\r\n                dispatch(setAgeRange({ ageRange: selectedAgeRange }));\r\n                break;\r\n            case 'levelOfStufy':\r\n                dispatch(setLevelOfStudy({ levelOfStufy: inputValue }));\r\n                break;\r\n            case 'visibility':\r\n                const selectedVisibility = inputValue || user.visibility;\r\n                dispatch(setPrivacyType({ privacy: selectedVisibility }));\r\n                break;\r\n            case 'notes':\r\n                dispatch(setDescription({ description: inputValue }));\r\n                break;\r\n\r\n            default:\r\n                // Handle default case or do nothing\r\n                break;\r\n        }\r\n    };\r\n\r\n\r\n    const nav = useNavigate();\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n\r\n    const handlePostButtonClick = async () => {\r\n        setIsSubmitted(true);\r\n\r\n        try {\r\n            const url = API_URL + '/studyRequests';\r\n            const method = 'POST';\r\n\r\n            console.log(\"data\", requestWithoutShowMoreOptions);\r\n\r\n            const data = await doApiRequest(url, method, requestWithoutShowMoreOptions);\r\n            if (data.status === 201) {\r\n                nav(\"/user\");\r\n            }\r\n            // await handleUserInfo(dispatch);\r\n        } catch (error) {\r\n            setIsSubmitted(false);\r\n            console.log(error.data ? error.data.data.msg : 'An error occurred');\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='container mt-3'>\r\n            <div className='text-center'>\r\n                <div className='container col-lg-5 col-md-9 col-10 bg-light border border-4 border-info px-4' >\r\n                    <h2 className='mt-3 pt-2'>{translate('navbar.createPost', language)}</h2>\r\n\r\n                    <div className='row '>\r\n                        <div className='mt-4 col-12'>\r\n                            <Sefaria selectedTopics={selectedTopics} setSelectedTopics={setSelectedTopics} />\r\n                        </div>\r\n                        <div className='my-3 col-12'>\r\n                            <div className='row'>\r\n                                <div className='col-md-6'>\r\n                                    <div className='row align-items-center'>\r\n                                        <div className='col-4'>\r\n                                            <label htmlFor='minDuration'>{translate('post.min', language)}:</label>\r\n                                        </div>\r\n                                        <div className='col-8'>\r\n                                            <input\r\n                                                type='number'\r\n                                                className='form-control'\r\n                                                id='minDuration'\r\n                                                min='5'\r\n                                                max={requestStudy.studyDuration.max}\r\n                                                defaultValue={requestStudy.studyDuration.min}\r\n                                                onChange={(e) => handleInputChange(e, 'minDuration')}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='col-md-6'>\r\n                                    <div className='row align-items-center'>\r\n                                        <div className='col-4'>\r\n                                            <label htmlFor='maxDuration'>{translate('post.max', language)}:</label>\r\n                                        </div>\r\n                                        <div className='col-8'>\r\n                                            <input\r\n                                                type='number'\r\n                                                className='form-control'\r\n                                                id='maxDuration'\r\n                                                min={requestStudy.studyDuration.min}\r\n                                                max='40'\r\n                                                value={requestStudy.studyDuration.max}\r\n                                                onChange={(e) => handleInputChange(e, 'maxDuration')}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='row mb-3'>\r\n                            <label htmlFor='startDate' className='col-3 col-form-label'>\r\n                            {translate('post.dateAndTime', language)}:\r\n                            </label>\r\n                            <div className='col-9'>\r\n                                <input\r\n                                    name='startDate'\r\n                                    onInput={(e) => handleInputChange(e, 'startDate')}\r\n                                    className='form-control'\r\n                                    type='datetime-local'\r\n                                    id='startDate'\r\n                                    defaultValue={requestStudy.startDate}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className='row mb-3'>\r\n                            <label htmlFor='preferredLanguages' className='col-3 col-form-label'>\r\n                            {translate('post.language', language)}:\r\n                            </label>\r\n                            <div className='col-9'>\r\n                                <select\r\n                                    name='preferredLanguages'\r\n                                    defaultValue={requestStudy.preferredLanguages}\r\n                                    className='form-control'\r\n                                    id='preferredLanguages'\r\n                                    onChange={(e) => handleInputChange(e, 'preferredLanguages')}\r\n                                >\r\n                                    <option value='' disabled>\r\n                                    {translate('post.selectLanguage', language)}\r\n                                    </option>\r\n                                    {commonLanguages.map((preferredLanguages) => (\r\n                                        <option key={preferredLanguages} value={preferredLanguages}>\r\n                                            {preferredLanguages}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className='row mb-3'>\r\n                            <label htmlFor='notes' className='col-3 col-form-label'>\r\n                            {translate('post.notes', language)}:\r\n                            </label>\r\n                            <div className='col-9'>\r\n                                <textarea\r\n                                    name='notes'\r\n                                    onInput={(e) => handleInputChange(e, 'notes')}\r\n                                    className='form-control'\r\n                                    id='notes'\r\n                                    defaultValue={requestStudy.notes}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <br />\r\n                        <button\r\n                            className='btn btn-success my-2 col-2 d-flex justify-content-center mx-auto'\r\n                            type='button'\r\n                            onClick={handlePostButtonClick}\r\n                        >\r\n                            {translate('post.post', language)}\r\n                        </button>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\nexport default ProfileInput\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// translator.js\r\nimport enTranslations from '../locals/en.json';\r\nimport heTranslations from '../locals/he.json';\r\n\r\nconst translations = {\r\n  en: enTranslations,\r\n  he: heTranslations,\r\n};\r\n\r\nconst translate = (key, lang) => {\r\n  const keys = key.split('.');\r\n  let currentTranslation = translations[lang];\r\n\r\n  for (const k of keys) {\r\n    if (!currentTranslation || !currentTranslation[k]) {\r\n      return key; // Return the key itself if translation not found\r\n    }\r\n    currentTranslation = currentTranslation[k];\r\n  }\r\n\r\n  return currentTranslation;\r\n};\r\n\r\nexport default translate;\r\n"],"names":["_ref","selectedTopics","setSelectedTopics","language","useSelector","myStore","languageSlice","searchTerm","setSearchTerm","useState","options","setOptions","isMouseOver","setIsMouseOver","dropdownRef","useRef","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","_jsxs","className","children","_jsx","translate","InputGroup","FormControl","placeholder","defaultValue","onChange","async","term","e","value","response","axios","get","concat","data","completions","error","console","ListGroup","ref","map","option","index","Item","action","onClick","handleAddTopic","topic","includes","prevTopics","style","cursor","length","onMouseEnter","onMouseLeave","fontSize","log","filter","t","handleRemoveTopic","ProfileInput","dispatch","useDispatch","requestStudy","requestSlice","request","ratings","setRatings","ageRange","levelOfStufy","educationRange","locationRange","friendListRange","user","userSlice","requestWithoutShowMoreOptions","showMoreOptions","setTopics","topics","handleInputChange","inputName","ratingValue","prevRatings","inputValue","newMinDuration","parseInt","currentMaxDuration","studyDuration","max","isNaN","setStudyDuration","min","newMaxDuration","currentMinDuration","startDateAndTime","selectedLanguages","preferredLanguages","setPreferredLanguages","selectedFriendListRange","setFriendListRange","selectedLocationRange","setLocationRange","selectedEducationRange","setEducationRange","selectedAgeRange","setAgeRange","setLevelOfStudy","selectedVisibility","visibility","setPrivacyType","privacy","setDescription","description","nav","useNavigate","isSubmitted","setIsSubmitted","Sefaria","htmlFor","type","id","name","onInput","startDate","disabled","commonLanguages","notes","url","API_URL","method","doApiRequest","status","msg","translations","en","he","key","lang","keys","split","currentTranslation","k"],"sourceRoot":""}